[{"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Signup.js":"3","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Login.js":"4","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Home.js":"5","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\AddPost.js":"6","C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\SinglePost.js":"7"},{"size":470,"mtime":1689665769881,"results":"8","hashOfConfig":"9"},{"size":2740,"mtime":1689617732345,"results":"10","hashOfConfig":"9"},{"size":1919,"mtime":1689616763556,"results":"11","hashOfConfig":"9"},{"size":2051,"mtime":1689766384827,"results":"12","hashOfConfig":"9"},{"size":1017,"mtime":1689767484748,"results":"13","hashOfConfig":"9"},{"size":2234,"mtime":1689766526421,"results":"14","hashOfConfig":"9"},{"size":4023,"mtime":1689768783999,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12nh0jb",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\index.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\App.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Signup.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Login.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\Home.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\AddPost.js",[],[],"C:\\Users\\Admin\\Desktop\\blog\\client\\blog-app\\src\\components\\SinglePost.js",["38"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nfunction SinglePost() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [post, setPost] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedTitle, setEditedTitle] = useState('');\r\n  const [editedContent, setEditedContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchPost();\r\n  }, []); // Add an empty dependency array to ensure useEffect runs only once\r\n\r\n  const fetchPost = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\r\n      setPost(response.data);\r\n      setEditedTitle(response.data.title);\r\n      setEditedContent(response.data.content);\r\n    } catch (error) {\r\n      console.error('Error fetching post', error);\r\n    }\r\n  };\r\n\r\n  const handleEditPost = async () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSavePost = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.patch(\r\n        `http://localhost:5000/api/posts/${id}`,\r\n        { title: editedTitle, content: editedContent },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      setIsEditing(false);\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error updating post', error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePost = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.delete(`http://localhost:5000/api/posts/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      setPost(null);\r\n      // Navigate to home page after successful post deletion\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error deleting post', error);\r\n    }\r\n  };\r\n  const getUserId = () => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      const decodedToken = JSON.parse(atob(token.split('.')[1]));\r\n      return decodedToken.id;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Check if the user is the author of the post\r\n  const isAuthor = post && post.author._id === getUserId();\r\n\r\n  // Function to get the user ID from the token\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {post ? (\r\n        <div>\r\n          {isEditing ? (\r\n            <div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"title\" className=\"form-label\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"title\"\r\n                  className=\"form-control\"\r\n                  value={editedTitle}\r\n                  onChange={(e) => setEditedTitle(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label htmlFor=\"content\" className=\"form-label\">Content</label>\r\n                <textarea\r\n                  id=\"content\"\r\n                  className=\"form-control\"\r\n                  value={editedContent}\r\n                  onChange={(e) => setEditedContent(e.target.value)}\r\n                />\r\n              </div>\r\n              <button onClick={handleSavePost} className=\"btn btn-primary\">\r\n                Save\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <h2 className=\"mt-4 mb-3\">{post.title}</h2>\r\n              <p className=\"mb-3\">Author: {post.author.username}</p>\r\n              <p>{post.content}</p>\r\n              {isAuthor && (\r\n                <button onClick={handleEditPost} className=\"btn btn-primary me-2\">\r\n                  Edit Post\r\n                </button>\r\n              )}\r\n              {isAuthor && (\r\n                <button onClick={handleDeletePost} className=\"btn btn-danger\">\r\n                  Delete Post\r\n                </button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SinglePost;\r\n",{"ruleId":"39","severity":1,"message":"40","line":15,"column":6,"nodeType":"41","endLine":15,"endColumn":8,"suggestions":"42"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.","ArrayExpression",["43"],{"desc":"44","fix":"45"},"Update the dependencies array to be: [fetchPost]",{"range":"46","text":"47"},[491,493],"[fetchPost]"]